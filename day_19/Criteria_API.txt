The Criteria API is part of the Java Persistence API (JPA) and provides a type-safe way to create database queries using Java objects, rather than writing raw SQL or JPQL (Java Persistence Query Language).

 This API is particularly useful in dynamic query generation scenarios, where query parameters or filters may change at runtime, as well as in applications where compile-time type safety is important.

Here’s an in-depth overview of the Criteria API:

1.Core Concepts and Structure:-
==============================
The Criteria API uses Java's object-oriented approach to construct database queries, offering a way to build queries programmatically. Key components include:

a)CriteriaBuilder: The starting point for Criteria API queries. It is responsible for creating CriteriaQuery objects and various query expressions (like comparison, logical operators, etc.).

b)CriteriaQuery: Represents a query, including the specification of query results and filtering conditions.

c)Root: Defines the “root” of the entity that is queried. This is typically the primary entity involved in the query.

d)Predicate: Represents a single condition or expression in a query’s WHERE clause. Multiple predicates can be combined using logical operators (AND, OR, etc.).

e)Path: Used to navigate an entity’s attributes. For instance, if querying a `User` entity, `user.get("name")` would represent a path for the "name" attribute.

f)TypedQuery: Represents a query with a known return type, like `TypedQuery<User>` for a `User` entity query.


2.Setting up a Criteria Query:-
=============================
A Criteria query typically follows these steps:

1.Obtain a `CriteriaBuilder`: This is done from an `EntityManager`.

2.Create a `CriteriaQuery`: Initialize a new `CriteriaQuery` with the result type (e.g., `User.class`).

3.Define the Query Roots: Use the `Root` object to specify the main entity in the FROM clause.

4.Create Predicates and Set Conditions: Define predicates for the WHERE clause using the `CriteriaBuilder`.

5.Build and Execute the Query: Set the root, predicates, and order, and then execute the query.


3.Example of a Simple Criteria Query:-
====================================
Imagine we have an entity `User` with attributes `id`, `name`, and `email`, and we want to fetch all users whose name is "John".

Here’s a step-by-step code example:

// Step 1: Obtain a CriteriaBuilder from EntityManager
CriteriaBuilder cb = entityManager.getCriteriaBuilder();

// Step 2: Create a CriteriaQuery for the User entity
CriteriaQuery<User> query = cb.createQuery(User.class);

// Step 3: Define the root entity for the query (FROM User)
Root<User> user = query.from(User.class);

// Step 4: Define the WHERE clause predicate
Predicate namePredicate = cb.equal(user.get("name"), "John");

// Step 5: Apply the predicate to the query
query.select(user).where(namePredicate);

// Step 6: Create a TypedQuery and execute
TypedQuery<User> typedQuery = entityManager.createQuery(query);
List<User> results = typedQuery.getResultList();


4.Using Multiple Predicates:-
===========================
The Criteria API supports complex queries, including combining multiple conditions with AND and OR. For example, to find users with the name "John" and email ending with "@example.com":

Predicate namePredicate = cb.equal(user.get("name"), "John");
Predicate emailPredicate = cb.like(user.get("email"), "%@example.com");

query.select(user).where(cb.and(namePredicate, emailPredicate));



5.Dynamic Query Generation:-
===========================
One of the key benefits of the Criteria API is its support for dynamic query generation. For instance, if you’re building a search feature where users can filter by various criteria (e.g., name, email, and age), you can dynamically add conditions:

CriteriaBuilder cb = entityManager.getCriteriaBuilder();
CriteriaQuery<User> query = cb.createQuery(User.class);
Root<User> user = query.from(User.class);

List<Predicate> predicates = new ArrayList<>();

// Conditionally add predicates
if (name != null) {
    predicates.add(cb.equal(user.get("name"), name));
}
if (email != null) {
    predicates.add(cb.like(user.get("email"), "%" + email + "%"));
}
if (age != null) {
    predicates.add(cb.greaterThanOrEqualTo(user.get("age"), age));
}

// Combine predicates using AND
query.select(user).where(cb.and(predicates.toArray(new Predicate[0])));

TypedQuery<User> typedQuery = entityManager.createQuery(query);
List<User> results = typedQuery.getResultList();


This example shows how predicates are added conditionally, depending on whether certain filter criteria are provided.

6.Sorting and Ordering Results:-
===============================
To sort results using the Criteria API, you can specify ordering conditions:

query.orderBy(cb.asc(user.get("name"))); // Ascending order by name


7.Pagination Support:-
====================
Criteria API queries also support pagination using the `setFirstResult` and `setMaxResults` methods of `TypedQuery`. This is useful for implementing features like "Load More" or paginated lists.

TypedQuery<User> typedQuery = entityManager.createQuery(query);
typedQuery.setFirstResult(0);    // Start from the first result
typedQuery.setMaxResults(10);    // Limit to 10 results per page
List<User> results = typedQuery.getResultList();


8.Joining Related Entities:-
==========================
For relationships, you can create joins using the `join` method. For instance, if `User` has a relationship with an `Order` entity:

Root<User> user = query.from(User.class);
Join<User, Order> order = user.join("orders"); // Assuming 'orders' is a collection in User
Predicate orderStatus = cb.equal(order.get("status"), "COMPLETED");

query.select(user).where(orderStatus);


9.Advantages and Limitations:-
=============================
#Advantages
-Type Safety: With Criteria API, the compiler checks query structure and parameters, which reduces runtime errors.
-Dynamic Queries: Simplifies dynamic query creation and avoids concatenation of strings, which is common in SQL.
-Object-Oriented Approach: Queries are built using Java classes and methods, making the code more readable and maintainable.

#Limitations
-Verbosity: Criteria queries can be verbose compared to JPQL or SQL.
-Complexity in Nested Queries: Some complex queries can become hard to read or manage, especially with deep joins or subqueries.

10.When to Use the Criteria API:-
===============================
The Criteria API is ideal for cases where:
-Dynamic Filtering is required, especially in complex applications with user-defined filters.
-Compile-Time Checking is essential, particularly in applications that require a high level of code correctness.
- You need to avoidSQL Injection risks, as the Criteria API automatically handles binding of parameters.

For simpler static queries, JPQL or native SQL might be preferable due to their conciseness. However, in cases requiring programmatic and safe query generation, the Criteria API is a robust choice.